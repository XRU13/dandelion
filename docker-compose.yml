version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fastapi_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres}"]
      interval: 5s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  # Redis для Celery
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - app_network
    restart: unless-stopped

  # FastAPI приложение (с автоматическими миграциями)
  web:
    build: .
    container_name: fastapi_app
    ports:
      - "8000:8000"
    command: >
      sh -c "
      echo 'Waiting for PostgreSQL...' &&
      while ! nc -z postgres 5432; do
        echo 'Waiting for PostgreSQL...';
        sleep 2;
      done;
      echo 'PostgreSQL is ready! Running migrations...' &&
      alembic upgrade head &&
      echo 'Starting FastAPI app...' &&
      gunicorn app.composites.http_api:app --bind 0.0.0.0:8000 --worker-class uvicorn.workers.UvicornWorker --workers 1
      "
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-fastapi_db}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
    networks:
      - app_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build: .
    container_name: celery_worker
    command: celery -A app.adapters.celery.config worker --loglevel=info -P solo
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-fastapi_db}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
    networks:
      - app_network
    restart: unless-stopped

  celery_beat:
    build: .
    container_name: celery_beat
    command: celery -A app.adapters.celery.config beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-fastapi_db}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
      - ./tmp:/tmp
    networks:
      - app_network
    restart: unless-stopped

  flower:
    build: .
    container_name: celery_flower
    command: celery -A app.adapters.celery.config flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-fastapi_db}
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - .:/app
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge
